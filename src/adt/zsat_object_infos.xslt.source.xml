<?sap.transform simple?>
<tt:transform xmlns:tt="http://www.sap.com/transformation-templates" xmlns:ddic="http://www.sap.com/abapxml/types/dictionary">

  <!--
     Some public reusable templates concerning information about ADT objects
  -->
  <tt:root name="ADT_OBJECT_INFO" type="ddic:zsat_adt_object_info"/>
  <tt:root name="ADT_OBJECT_INFOS" type="ddic:zsat_adt_object_info_t"/>

  <!-- Public template for transforming an ADT objects properties -->
  <tt:template name="adtObjectProperties">
    <tt:context>
      <tt:root name="PROPERTIES" type="ddic:zsat_adt_object_properties"/>
    </tt:context>

    <properties>
      <tt:cond s-check="not-initial(PROPERTIES.OWNER)">
        <tt:attribute name="owner" value-ref="PROPERTIES.OWNER"/>
      </tt:cond>

      <tt:cond s-check="not-initial(PROPERTIES.PACKAGE)">
        <tt:attribute name="packageName" value-ref="PROPERTIES.PACKAGE"/>
      </tt:cond>

      <tt:cond s-check="not-initial(PROPERTIES.CREATED_DATE)">
        <tt:attribute name="createdDate" value-ref="PROPERTIES.CREATED_DATE"/>
      </tt:cond>

      <tt:cond s-check="not-initial(PROPERTIES.CHANGED_DATE)">
        <tt:attribute name="changedDate" value-ref="PROPERTIES.CHANGED_DATE"/>
      </tt:cond>

    </properties>
  </tt:template>

  <!-- Public template for transforming an ADT Object information structure -->
  <tt:template name="adtObjectInfo">
    <tt:context>
      <tt:root name="ADT_OBJECT_INFO"/>
    </tt:context>

    <adtObjectInfo>
      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.NAME)">
        <tt:attribute name="name" value-ref="ADT_OBJECT_INFO.NAME"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.RAW_NAME)">
        <tt:attribute name="rawName" value-ref="ADT_OBJECT_INFO.RAW_NAME"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.DESCRIPTION)">
        <tt:attribute name="description" value-ref="ADT_OBJECT_INFO.DESCRIPTION"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.OBJECT_TYPE)">
        <tt:attribute name="objectType" value-ref="ADT_OBJECT_INFO.OBJECT_TYPE"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.SOURCE_TYPE)">
        <tt:attribute name="sourceType" value-ref="ADT_OBJECT_INFO.SOURCE_TYPE"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.ADT_TYPE)">
        <tt:attribute name="adtType" value-ref="ADT_OBJECT_INFO.ADT_TYPE"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.URI)">
        <tt:attribute name="uri" value-ref="ADT_OBJECT_INFO.URI"/>
      </tt:cond>

      <tt:cond s-check="not-initial(ADT_OBJECT_INFO.PACKAGE)">
        <tt:attribute name="packageName" value-ref="ADT_OBJECT_INFO.PACKAGE"/>
      </tt:cond>

    </adtObjectInfo>
  </tt:template>

  <!-- Public template for transforming a table of ADT object infos -->
  <tt:template name="adtObjectInfos">
    <tt:context>
      <tt:root name="ADT_OBJECT_INFOS"/>
    </tt:context>

    <adtObjectInfos tt:extensible="deep">
      <tt:apply name="adtObjectInfoLoop">
        <tt:with-root name="ADT_OBJECT_INFOS" ref="ADT_OBJECT_INFOS"/>
      </tt:apply>
    </adtObjectInfos>
  </tt:template>

  <!-- Public template to iterate over a list of of ADT object infors -->
  <tt:template name="adtObjectInfoLoop">
    <tt:context>
      <tt:root name="ADT_OBJECT_INFOS"/>
    </tt:context>

    <tt:loop ref="ADT_OBJECT_INFOS">
      <tt:apply name="adtObjectInfo">
        <tt:with-root name="ADT_OBJECT_INFO" ref="$ref"/>
      </tt:apply>
    </tt:loop>
  </tt:template>

</tt:transform>
